import { useState } from 'react'
import { Brain, FileText, Loader2, Upload, X, CheckCircle } from 'lucide-react'

interface LangExtractSectionProps {
  onExtract: (text: string, prompt?: string) => void
  loading: boolean
}

interface ProcessedFile {
  file: File
  status: 'processing' | 'completed' | 'error'
  text?: string
  error?: string
}

export default function LangExtractSection({ onExtract, loading }: LangExtractSectionProps) {
  const [processedFiles, setProcessedFiles] = useState<ProcessedFile[]>([])
  const [prompt, setPrompt] = useState('–ò–∑–≤–ª–µ–∫–∏ –ª—é–¥–µ–π, –∫–æ–º–ø–∞–Ω–∏–∏, –º–µ—Å—Ç–∞, —Å–æ–±—ã—Ç–∏—è –∏ –¥–∞—Ç—ã –∏–∑ –≤—Å–µ—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤')
  const [combinedText, setCombinedText] = useState('')

  const handleFilesUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = Array.from(e.target.files || [])
    if (files.length === 0) return

    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    const newFiles: ProcessedFile[] = files.map(file => ({
      file,
      status: 'processing'
    }))
    
    setProcessedFiles(prev => [...prev, ...newFiles])

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
    for (const fileItem of newFiles) {
      try {
        const text = await readFileAsText(fileItem.file)
        
        setProcessedFiles(prev => {
          const updated = prev.map(f => 
            f.file === fileItem.file 
              ? { ...f, status: 'completed', text }
              : f
          )
          // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
          setTimeout(() => {
            const completedFiles = updated.filter(f => f.status === 'completed' && f.text)
            const combined = completedFiles
              .map(f => `\n=== ${f.file.name} ===\n${f.text}`)
              .join('\n\n')
            setCombinedText(combined)
          }, 0)
          return updated
        })
      } catch (error) {
        setProcessedFiles(prev => prev.map(f => 
          f.file === fileItem.file 
            ? { ...f, status: 'error', error: String(error) }
            : f
        ))
      }
    }
  }

  const updateCombinedText = () => {
    const completedFiles = processedFiles.filter(f => f.status === 'completed' && f.text)
    const combined = completedFiles
      .map(f => `\n=== ${f.file.name} ===\n${f.text}`)
      .join('\n\n')
    setCombinedText(combined)
  }

  const removeFile = (fileToRemove: File) => {
    setProcessedFiles(prev => {
      const updated = prev.filter(f => f.file !== fileToRemove)
      // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
      const completedFiles = updated.filter(f => f.status === 'completed' && f.text)
      const combined = completedFiles
        .map(f => `\n=== ${f.file.name} ===\n${f.text}`)
        .join('\n\n')
      setCombinedText(combined)
      return updated
    })
  }

  const handleExtract = () => {
    if (!combinedText.trim()) return
    onExtract(combinedText, prompt)
  }

  const readFileAsText = async (file: File): Promise<string> => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    if (file.type === 'application/pdf' || file.name.toLowerCase().endsWith('.pdf')) {
      return await parsePDF(file)
    }
    
    // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —á—Ç–µ–Ω–∏–µ
    return new Promise((resolve, reject) => {
      const reader = new FileReader()
      reader.onload = (e) => {
        const result = e.target?.result
        if (typeof result === 'string') {
          resolve(result)
        } else {
          reject(new Error('Failed to read file as text'))
        }
      }
      reader.onerror = () => reject(new Error('File reading error'))
      reader.readAsText(file, 'utf-8')
    })
  }

  const parsePDF = async (file: File): Promise<string> => {
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
      const formData = new FormData()
      formData.append('file', file)
      
      const response = await fetch('/api/extract-pdf-text', {
        method: 'POST',
        body: formData
      })
      
      if (response.ok) {
        const result = await response.json()
        return result.text || 'PDF –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –Ω–æ —Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
      }
      
      // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–∏–µ–Ω—Ç—Å–∫—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
      throw new Error('–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±—É–µ–º –∫–ª–∏–µ–Ω—Ç—Å–∫—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É')
      
    } catch (error) {
      console.warn('Server PDF processing failed, trying client-side:', error)
      
      // –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º worker
      try {
        const pdfjsLib = await import('pdfjs-dist')
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π worker –∏–∑ node_modules
        pdfjsLib.GlobalWorkerOptions.workerSrc = new URL(
          'pdfjs-dist/build/pdf.worker.min.js',
          import.meta.url
        ).toString()
        
        const arrayBuffer = await file.arrayBuffer()
        const pdf = await pdfjsLib.getDocument({
          data: arrayBuffer,
          verbosity: 0 // –û—Ç–∫–ª—é—á–∞–µ–º –ª–∏—à–Ω–∏–µ –ª–æ–≥–∏
        }).promise
        
        let fullText = ''
        
        for (let i = 1; i <= pdf.numPages; i++) {
          try {
            const page = await pdf.getPage(i)
            const textContent = await page.getTextContent()
            const pageText = textContent.items
              .filter((item: any) => item.str && item.str.trim())
              .map((item: any) => item.str)
              .join(' ')
            
            if (pageText.trim()) {
              fullText += `\n--- –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${i} ---\n${pageText.trim()}\n`
            }
          } catch (pageError) {
            console.warn(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${i}:`, pageError)
            fullText += `\n--- –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${i} ---\n[–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞]\n`
          }
        }
        
        return fullText.trim() || 'PDF —Ñ–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–∑–≤–ª–µ–∫–∞–µ–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞'
        
      } catch (clientError) {
        console.error('Client-side PDF parsing failed:', clientError)
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å PDF —Ñ–∞–π–ª. –í–æ–∑–º–æ–∂–Ω–æ, —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ –∑–∞—â–∏—â–µ–Ω –ø–∞—Ä–æ–ª–µ–º. –û—à–∏–±–∫–∞: ${clientError}`)
      }
    }
  }

  return (
    <div className="bg-white rounded-lg shadow-sm border border-slate-200 p-6">
      <div className="flex items-center justify-between mb-4">
        <h2 className="text-xl font-semibold text-slate-900 flex items-center gap-2">
          <Brain className="w-5 h-5" />
          –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        </h2>
        <div className="bg-violet-100 text-violet-800 text-xs font-medium px-2.5 py-0.5 rounded">
          –®–∞–≥ 2
        </div>
      </div>
      
      <div className="bg-violet-50 border border-violet-200 rounded-md p-3 mb-6">
        <p className="text-sm text-violet-800">
          <strong>üß† –í—Ç–æ—Ä–æ–π —à–∞–≥:</strong> –ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã. –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ—á–µ—Ç —Ç–µ–∫—Å—Ç –∏ –Ω–∞–π–¥–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞.
        </p>
      </div>
      
      <div className="space-y-6">
        {/* Multiple File Upload */}
        <div>
          <label className="block text-sm font-medium text-slate-700 mb-3">
            –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
          </label>
          <div className="border-2 border-dashed border-slate-300 rounded-lg p-6 text-center hover:border-violet-400 transition-colors">
            <Upload className="w-12 h-12 text-slate-400 mx-auto mb-4" />
            <div className="mb-4">
              <input
                type="file"
                multiple
                accept=".txt,.md,.pdf,.doc,.docx,.rtf,.csv,.json,.xml,.html"
                onChange={handleFilesUpload}
                className="hidden"
                id="file-upload"
              />
              <label
                htmlFor="file-upload"
                className="cursor-pointer bg-violet-600 text-white px-6 py-2 rounded-lg hover:bg-violet-700 transition-colors"
              >
                –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã
              </label>
            </div>
            <p className="text-sm text-slate-500">
              –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: PDF, DOC, DOCX, TXT, MD, RTF, CSV, JSON, XML, HTML
            </p>
          </div>
        </div>

        {/* Processed Files List */}
        {processedFiles.length > 0 && (
          <div>
            <h3 className="text-sm font-medium text-slate-700 mb-3">
              –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã ({processedFiles.length})
            </h3>
            <div className="space-y-2 max-h-60 overflow-y-auto">
              {processedFiles.map((fileItem, index) => (
                <div key={index} className="flex items-center gap-3 p-3 bg-slate-50 rounded-lg">
                  <div className="flex-shrink-0">
                    {fileItem.status === 'processing' && (
                      <Loader2 className="w-4 h-4 animate-spin text-blue-500" />
                    )}
                    {fileItem.status === 'completed' && (
                      <CheckCircle className="w-4 h-4 text-green-500" />
                    )}
                    {fileItem.status === 'error' && (
                      <X className="w-4 h-4 text-red-500" />
                    )}
                  </div>
                  
                  <div className="flex-1 min-w-0">
                    <div className="text-sm font-medium text-slate-900 truncate">
                      {fileItem.file.name}
                    </div>
                    <div className="text-xs text-slate-500">
                      {(fileItem.file.size / 1024).toFixed(1)} KB
                      {fileItem.status === 'completed' && fileItem.text && (
                        <span className="ml-2">‚Ä¢ {fileItem.text.length} —Å–∏–º–≤–æ–ª–æ–≤</span>
                      )}
                      {fileItem.status === 'error' && (
                        <span className="ml-2 text-red-600">‚Ä¢ {fileItem.error}</span>
                      )}
                    </div>
                  </div>
                  
                  <button
                    onClick={() => removeFile(fileItem.file)}
                    className="flex-shrink-0 text-slate-400 hover:text-red-500 transition-colors"
                  >
                    <X className="w-4 h-4" />
                  </button>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Combined Text Preview */}
        {combinedText && (
          <div>
            <h3 className="text-sm font-medium text-slate-700 mb-3">
              –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            </h3>
            <div className="bg-slate-50 border border-slate-200 rounded-lg p-4 max-h-40 overflow-y-auto">
              <pre className="text-xs text-slate-600 whitespace-pre-wrap">
                {combinedText.slice(0, 1000)}
                {combinedText.length > 1000 && '...\n\n[–ü–æ–∫–∞–∑–∞–Ω–æ –ø–µ—Ä–≤—ã–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤]'}
              </pre>
            </div>
            <div className="text-xs text-slate-500 mt-2">
              –í—Å–µ–≥–æ —Å–∏–º–≤–æ–ª–æ–≤: {combinedText.length}
            </div>
          </div>
        )}

        {/* Custom Prompt */}
        <div>
          <label className="block text-sm font-medium text-slate-700 mb-2">
            –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—É—â–Ω–æ—Å—Ç–µ–π
          </label>
          <textarea
            value={prompt}
            onChange={(e) => setPrompt(e.target.value)}
            placeholder="–û–ø–∏—à–∏—Ç–µ, –∫–∞–∫–∏–µ —Å—É—â–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –∏–∑–≤–ª–µ—á—å..."
            className="w-full px-3 py-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-violet-500 focus:border-transparent resize-none"
            rows={3}
          />
        </div>

        {/* Extract Button */}
        <button
          onClick={handleExtract}
          disabled={!combinedText.trim() || loading}
          className="w-full flex items-center justify-center gap-2 px-4 py-3 bg-violet-600 text-white font-medium rounded-lg hover:bg-violet-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
        >
          {loading ? (
            <Loader2 className="w-5 h-5 animate-spin" />
          ) : (
            <Brain className="w-5 h-5" />
          )}
          üîç –ò–∑–≤–ª–µ—á—å —Å—É—â–Ω–æ—Å—Ç–∏ –∏–∑ –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        </button>

        {/* Info */}
        <div className="bg-violet-50 border border-violet-200 rounded-md p-3">
          <h4 className="text-sm font-medium text-violet-900 mb-1">üí° –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</h4>
          <ul className="text-xs text-violet-800 space-y-1">
            <li>‚Ä¢ –ó–∞–≥—Ä—É–∂–∞–π—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ</li>
            <li>‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ—á–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ –≤—Å–µ—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤</li>
            <li>‚Ä¢ AI –Ω–∞–π–¥–µ—Ç –ª—é–¥–µ–π, –∫–æ–º–ø–∞–Ω–∏–∏, –º–µ—Å—Ç–∞, –¥–∞—Ç—ã –∏ —Å–æ–±—ã—Ç–∏—è</li>
            <li>‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–ª—É—á—à–∞—Ç –∫–∞—á–µ—Å—Ç–≤–æ –ø–æ–∏—Å–∫–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ</li>
          </ul>
        </div>
      </div>
    </div>
  )
}
