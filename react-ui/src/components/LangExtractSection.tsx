import { useState } from 'react'
import { Brain, FileText, Loader2 } from 'lucide-react'

interface LangExtractSectionProps {
  onExtract: (text: string, prompt?: string) => void
  loading: boolean
}

export default function LangExtractSection({ onExtract, loading }: LangExtractSectionProps) {
  const [text, setText] = useState('')
  const [prompt, setPrompt] = useState('–ò–∑–≤–ª–µ–∫–∏ –ª—é–¥–µ–π, –∫–æ–º–ø–∞–Ω–∏–∏, –º–µ—Å—Ç–∞, —Å–æ–±—ã—Ç–∏—è –∏ –¥–∞—Ç—ã –∏–∑ —ç—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞')
  const [file, setFile] = useState<File | null>(null)

  const handleTextExtract = () => {
    if (!text.trim()) return
    onExtract(text, prompt)
  }

  const handleFileUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const selectedFile = e.target.files?.[0]
    if (!selectedFile) return

    setFile(selectedFile)
    
    try {
      const fileText = await readFileAsText(selectedFile)
      setText(fileText)
    } catch (error) {
      console.error('Error reading file:', error)
      alert('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª.')
    }
  }

  const readFileAsText = async (file: File): Promise<string> => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    if (file.type === 'application/pdf' || file.name.toLowerCase().endsWith('.pdf')) {
      return await parsePDF(file)
    }
    
    // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —á—Ç–µ–Ω–∏–µ
    return new Promise((resolve, reject) => {
      const reader = new FileReader()
      reader.onload = (e) => {
        const result = e.target?.result
        if (typeof result === 'string') {
          resolve(result)
        } else {
          reject(new Error('Failed to read file as text'))
        }
      }
      reader.onerror = () => reject(new Error('File reading error'))
      reader.readAsText(file, 'utf-8')
    })
  }

  const parsePDF = async (file: File): Promise<string> => {
    try {
      // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º PDF.js
      const pdfjsLib = await import('pdfjs-dist')
      pdfjsLib.GlobalWorkerOptions.workerSrc = `https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js`
      
      const arrayBuffer = await file.arrayBuffer()
      const pdf = await pdfjsLib.getDocument(arrayBuffer).promise
      
      let fullText = ''
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
      for (let i = 1; i <= pdf.numPages; i++) {
        const page = await pdf.getPage(i)
        const textContent = await page.getTextContent()
        const pageText = textContent.items
          .map((item: any) => item.str)
          .join(' ')
        fullText += `\n--- –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${i} ---\n${pageText}\n`
      }
      
      return fullText.trim()
    } catch (error) {
      console.error('PDF parsing error:', error)
      throw new Error(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ PDF: ${error}`)
    }
  }

  return (
    <div className="bg-white rounded-lg shadow-sm border border-slate-200 p-6">
      <div className="flex items-center justify-between mb-4">
        <h2 className="text-xl font-semibold text-slate-900 flex items-center gap-2">
          <Brain className="w-5 h-5" />
          LangExtract - –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π
        </h2>
        <div className="bg-violet-100 text-violet-800 text-xs font-medium px-2.5 py-0.5 rounded">
          –®–∞–≥ 2
        </div>
      </div>
      
      <div className="bg-violet-50 border border-violet-200 rounded-md p-3 mb-4">
        <p className="text-sm text-violet-800">
          <strong>üß† –í—Ç–æ—Ä–æ–π —à–∞–≥:</strong> –ò–∑–≤–ª–µ–∫–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏ (–∏–º–µ–Ω–∞, –∫–æ–º–ø–∞–Ω–∏–∏, –º–µ—Å—Ç–∞, –¥–∞—Ç—ã) –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. 
          –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –ø–æ–∏—Å–∫–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —ç—Ç–∞–ø–µ.
        </p>
      </div>
      
      <div className="space-y-4">
        {/* File Upload */}
        <div>
          <label className="block text-sm font-medium text-slate-700 mb-2">
            –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
          </label>
          <div className="flex items-center gap-3">
            <input
              type="file"
              accept=".txt,.md,.pdf,.doc,.docx,.rtf,.csv,.json,.xml,.html"
              onChange={handleFileUpload}
              className="flex-1 text-sm text-slate-500 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:text-sm file:font-medium file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100"
            />
            {file && (
              <span className="text-sm text-green-600 flex items-center gap-1">
                <FileText className="w-4 h-4" />
                {file.name}
              </span>
            )}
          </div>
        </div>

        {/* Text Input */}
        <div>
          <label className="block text-sm font-medium text-slate-700 mb-2">
            –¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
          </label>
          <textarea
            value={text}
            onChange={(e) => setText(e.target.value)}
            placeholder="–í—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—É—â–Ω–æ—Å—Ç–µ–π..."
            className="w-full px-3 py-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none"
            rows={8}
          />
        </div>

        {/* Custom Prompt */}
        <div>
          <label className="block text-sm font-medium text-slate-700 mb-2">
            –ü—Ä–æ–º–ø—Ç –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
          </label>
          <textarea
            value={prompt}
            onChange={(e) => setPrompt(e.target.value)}
            placeholder="–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω—É–∂–Ω–æ –∏–∑–≤–ª–µ—á—å –∏–∑ —Ç–µ–∫—Å—Ç–∞..."
            className="w-full px-3 py-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none"
            rows={3}
          />
        </div>

        {/* Extract Button */}
        <button
          onClick={handleTextExtract}
          disabled={!text.trim() || loading}
          className="w-full flex items-center justify-center gap-2 px-4 py-3 bg-violet-600 text-white font-medium rounded-lg hover:bg-violet-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
        >
          {loading ? (
            <Loader2 className="w-5 h-5 animate-spin" />
          ) : (
            <Brain className="w-5 h-5" />
          )}
          üîç –ò–∑–≤–ª–µ—á—å —Å—É—â–Ω–æ—Å—Ç–∏
        </button>

        {/* Info */}
        <div className="bg-violet-50 border border-violet-200 rounded-md p-3">
          <h4 className="text-sm font-medium text-violet-900 mb-1">üß† LangExtract:</h4>
          <p className="text-xs text-violet-800">
            –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º LLM.
            –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Ö–æ–¥–∏—Ç –ª—é–¥–µ–π, –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏, –º–µ—Å—Ç–∞, –¥–∞—Ç—ã, —Å–æ–±—ã—Ç–∏—è –∏ –¥—Ä—É–≥–∏–µ –≤–∞–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã.
          </p>
        </div>
      </div>
    </div>
  )
}
