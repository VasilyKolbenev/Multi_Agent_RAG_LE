#!/usr/bin/env python3
"""
–ü—Ä–æ–¥–∞–∫—à–Ω –∑–∞–ø—É—Å–∫ MultiAgent-RAG Pro –¥–ª—è –æ–±–ª–∞—á–Ω–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
"""
import os
import uvicorn
from pathlib import Path

# –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
Path("data/docs").mkdir(parents=True, exist_ok=True)
Path("data/extracts").mkdir(parents=True, exist_ok=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å fallback –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
def setup_environment():
    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    required_vars = {
        "OPENAI_API_KEY": "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ OPENAI_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è",
        "LLM_PROVIDER": "openai",
        "LLM_MODEL": "gpt-5-mini",
        "LX_MODEL_ID": "openai:gpt-5-mini"
    }
    
    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    optional_vars = {
        "DOCS_DIR": "data/docs",
        "DATA_DIR": "data",
        "PORT": "8000"
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    missing_vars = []
    for var, default in required_vars.items():
        if not os.environ.get(var):
            if var == "OPENAI_API_KEY":
                missing_vars.append(var)
            else:
                os.environ[var] = default
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    for var, default in optional_vars.items():
        if not os.environ.get(var):
            os.environ[var] = default
    
    # –í—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
    if missing_vars:
        print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        for var in missing_vars:
            print(f"   - {var}")
        print("\nüìù –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –≤–∞—à–µ–π –æ–±–ª–∞—á–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ")
        return False
    
    return True

def main():
    print("üöÄ MultiAgent-RAG Pro (Production Mode)")
    print("=" * 50)
    
    try:
        if not setup_environment():
            print("‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            exit(1)
        
        # –í—ã–≤–æ–¥–∏–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        print("üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
        print(f"   LLM Provider: {os.environ.get('LLM_PROVIDER')}")
        print(f"   LLM Model: {os.environ.get('LLM_MODEL')}")
        print(f"   LangExtract Model: {os.environ.get('LX_MODEL_ID')}")
        print(f"   Port: {os.environ.get('PORT')}")
        print("   OpenAI API Key: ‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç (Railway —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
        port = int(os.environ.get("PORT", 8000))
        
        print(f"üåê –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
        print("üìñ –ü–æ—Å–ª–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è API –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É:")
        print("   https://your-app.railway.app/docs")
        
        # –ó–∞–ø—É—Å–∫ —Å –ø—Ä–æ–¥–∞–∫—à–Ω –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        uvicorn.run(
            "server.main:app",
            host="0.0.0.0",
            port=port,
            reload=False,  # –û—Ç–∫–ª—é—á–∞–µ–º reload –≤ –ø—Ä–æ–¥–∞–∫—à–Ω
            access_log=True,
            log_level="info"
        )
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        import traceback
        traceback.print_exc()
        exit(1)

if __name__ == "__main__":
    main()
