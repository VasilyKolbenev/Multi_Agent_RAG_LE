import os
from dotenv import load_dotenv
from pathlib import Path

# --- –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ---

# –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ .env —Ñ–∞–π–ª—É –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
# –≠—Ç–æ —Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–ª—è Railway
env_path = Path(__file__).parent.parent / '.env'

if env_path.exists():
    load_dotenv(dotenv_path=env_path)
    print(f"‚úÖ Config: Loaded environment variables from {env_path.resolve()}")
else:
    print(f"‚ö†Ô∏è Config: .env file at {env_path.resolve()} not found. Relying on system environment variables.")

# --- –ì–ª–∞–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ---

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª—é—á OpenAI –∏ —Å—Ä–∞–∑—É –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ –Ω–∞–ª–∏—á–∏–µ
# –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (Railway UI Variables)
# –ü–æ–¥—Ç—è–≥–∏–≤–∞–µ–º –∫–ª—é—á –∏ —É–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã/–ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫/–∫–∞–≤—ã—á–∫–∏
OPENAI_API_KEY = (os.getenv("OPENAI_API_KEY") or os.getenv("API _KEY") or os.getenv("API_KEY") or "").strip().strip('"').strip("'")

# –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
if not OPENAI_API_KEY:
    print("üîç OPENAI_API_KEY not found. Debugging...")
    print(f"   - Environment variables count: {len(os.environ)}")
    
    # –ò—â–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–ª—é—á
    api_key_vars = [k for k in os.environ.keys() if 'API' in k.upper() or 'KEY' in k.upper()]
    if api_key_vars:
        print(f"   - Found API/KEY variables: {api_key_vars}")
        for var in api_key_vars:
            value = os.environ[var]
            print(f"     * {var}: {value[:10]}...{value[-4:] if len(value) > 14 else value}")
    else:
        print("   - No API/KEY variables found in environment")
    
    raise ValueError(
        "CRITICAL: OPENAI_API_KEY is not set or could not be loaded. "
        "Please ensure it is set as 'OPENAI_API_KEY' in Railway Variables."
    )

# –ü–µ—á–∞—Ç–∞–µ–º –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –ª–æ–≥–∞—Ö
print(f"   - OPENAI_API_KEY: Loaded (sk-proj-...{OPENAI_API_KEY[-4:]})")
if not OPENAI_API_KEY.startswith("sk-"):
    print("‚ö†Ô∏è  OPENAI_API_KEY doesn't start with 'sk-'. Check for extra characters or wrong key type.")

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
# –ß–∏—Ç–∞–µ–º –º–æ–¥–µ–ª—å –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é gpt-5-mini
LLM_MODEL = os.getenv("LLM_MODEL", "gpt-5-mini").strip()
EMBEDDING_MODEL = os.getenv("EMBEDDING_MODEL", "text-embedding-3-small").strip()
LX_MODEL_ID = os.getenv("LX_MODEL_ID", "gpt-4o-mini")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—É—é LangExtract –º–æ–¥–µ–ª—å

print(f"   - LLM_MODEL: {LLM_MODEL}")
print(f"   - EMBEDDING_MODEL: {EMBEDDING_MODEL}")
