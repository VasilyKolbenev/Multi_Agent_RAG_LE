"""
üöÄ Agentic RAG System - –£–º–Ω–∞—è –º–Ω–æ–≥–æ–∞–≥–µ–Ω—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–∏—Å–∫–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

–û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ —Å—Ç–∞—Ç—å–µ: https://habr.com/ru/articles/942278/
–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: Router Agent ‚Üí Retrieval Agents ‚Üí Query Rewriter ‚Üí Synthesis Agent
"""

import asyncio
import time
from typing import Dict, List, Any, Optional, Tuple
from enum import Enum
from dataclasses import dataclass
from .llm import LLM
from .retrieval import HybridCorpus
from .graph_index import GraphIndex
from .langx import run_extraction


class SearchStrategy(Enum):
    """–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ–∏—Å–∫–∞ –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤"""
    VECTOR_SEARCH = "vector"
    BM25_SEARCH = "bm25" 
    HYBRID_SEARCH = "hybrid"
    ENTITY_EXTRACTION = "entities"
    EXTERNAL_API = "external"


class AgentDecision(Enum):
    """–†–µ—à–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤"""
    CONTINUE = "continue"
    REWRITE_QUERY = "rewrite"
    CHANGE_STRATEGY = "change_strategy"
    SUFFICIENT = "sufficient"
    FAILED = "failed"


@dataclass
class SearchResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏"""
    content: List[Dict[str, Any]]
    strategy: SearchStrategy
    relevance_score: float
    confidence: float
    metadata: Dict[str, Any]


@dataclass
class AgentState:
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≥–µ–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    original_query: str
    current_query: str
    iteration: int
    strategies_tried: List[SearchStrategy]
    results_history: List[SearchResult]
    accumulated_context: str
    confidence_threshold: float = 0.7
    max_iterations: int = 5


class RouterAgent:
    """üéØ –ê–≥–µ–Ω—Ç-–º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä: –≤—ã–±–∏—Ä–∞–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–æ–∏—Å–∫–∞"""
    
    def __init__(self, llm: LLM):
        self.llm = llm
        
    async def analyze_query(self, query: str, state: AgentState) -> SearchStrategy:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å –∏ –≤—ã–±–∏—Ä–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–æ–∏—Å–∫–∞"""
        
        analysis_prompt = f"""
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–±–µ—Ä–∏ –ª—É—á—à—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–æ–∏—Å–∫–∞:
        
        –ó–ê–ü–†–û–°: "{query}"
        –ò–¢–ï–†–ê–¶–ò–Ø: {state.iteration}
        –£–ñ–ï –ü–†–û–ë–û–í–ê–õ–ò: {[s.value for s in state.strategies_tried]}
        
        –î–û–°–¢–£–ü–ù–´–ï –°–¢–†–ê–¢–ï–ì–ò–ò:
        1. HYBRID - –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫ (BM25 + –≤–µ–∫—Ç–æ—Ä—ã) - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π
        2. ENTITIES - –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ LangExtract - –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –ª—é–¥—è—Ö, –∫–æ–º–ø–∞–Ω–∏—è—Ö, –¥–∞—Ç–∞—Ö
        3. VECTOR - —Ç–æ–ª—å–∫–æ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ - –¥–ª—è –∫–æ–Ω—Ü–µ–ø—Ç—É–∞–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        4. BM25 - —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ - –¥–ª—è —Ç–æ—á–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
        
        –ü–†–ê–í–ò–õ–ê:
        - –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–º–µ–Ω–∞, –∫–æ–º–ø–∞–Ω–∏–∏, –¥–∞—Ç—ã ‚Üí ENTITIES
        - –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –∫–æ–Ω—Ü–µ–ø—Ç—É–∞–ª—å–Ω—ã–π, –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π ‚Üí VECTOR  
        - –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —Å —Ç–æ—á–Ω—ã–º–∏ —Ç–µ—Ä–º–∏–Ω–∞–º–∏ ‚Üí BM25
        - –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Üí HYBRID
        - –ù–µ –ø–æ–≤—Ç–æ—Ä—è–π —É–∂–µ –∏—Å–ø—Ä–æ–±–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        
        –û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: HYBRID/ENTITIES/VECTOR/BM25
        """
        
        try:
            response = await self.llm.complete(
                "–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –≤—ã–±–æ—Ä—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –ø–æ–∏—Å–∫–∞. –ë—É–¥—å –ª–∞–∫–æ–Ω–∏—á–µ–Ω.",
                analysis_prompt
            )
            
            # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
            strategy_map = {
                "HYBRID": SearchStrategy.HYBRID_SEARCH,
                "ENTITIES": SearchStrategy.ENTITY_EXTRACTION, 
                "VECTOR": SearchStrategy.VECTOR_SEARCH,
                "BM25": SearchStrategy.BM25_SEARCH
            }
            
            for key, strategy in strategy_map.items():
                if key in response.upper():
                    if strategy not in state.strategies_tried:
                        return strategy
            
            # Fallback: –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é –Ω–µ–∏—Å–ø—Ä–æ–±–æ–≤–∞–Ω–Ω—É—é
            available = [s for s in SearchStrategy if s not in state.strategies_tried]
            return available[0] if available else SearchStrategy.HYBRID_SEARCH
            
        except Exception as e:
            print(f"‚ö†Ô∏è Router Agent error: {e}")
            return SearchStrategy.HYBRID_SEARCH


class RetrievalAgent:
    """üîç –ê–≥–µ–Ω—Ç –≤—ã–±–æ—Ä–∫–∏: –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    
    def __init__(self, corpus: HybridCorpus, graph: GraphIndex):
        self.corpus = corpus
        self.graph = graph
        
    async def execute_search(self, query: str, strategy: SearchStrategy, k: int = 10) -> SearchResult:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        
        start_time = time.time()
        
        try:
            if strategy == SearchStrategy.HYBRID_SEARCH:
                results = self.corpus.search(query, k=k)
                content = [{"text": r["text"], "doc_id": r["doc_id"], "chunk_id": r["chunk_id"]} for r in results]
                
            elif strategy == SearchStrategy.ENTITY_EXTRACTION:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—É—â–Ω–æ—Å—Ç–∏ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
                extraction = run_extraction(query, "–ò–∑–≤–ª–µ–∫–∏ –≤—Å–µ —É–ø–æ–º—è–Ω—É—Ç—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏: –ª—é–¥–µ–π, –∫–æ–º–ø–∞–Ω–∏–∏, –º–µ—Å—Ç–∞, –¥–∞—Ç—ã")
                entities = [item.get("text", "") for item in extraction.get("items", [])]
                
                # –ò—â–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å —ç—Ç–∏–º–∏ —Å—É—â–Ω–æ—Å—Ç—è–º–∏
                if entities:
                    allowed_docs = self.graph.filter_docs(entities[:10])
                    results = self.corpus.search(query, k=k)  # TODO: –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ allowed_docs
                    content = [{"text": r["text"], "doc_id": r["doc_id"], "entities": entities} for r in results]
                else:
                    # Fallback –Ω–∞ –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫
                    results = self.corpus.search(query, k=k)
                    content = [{"text": r["text"], "doc_id": r["doc_id"]} for r in results]
                    
            elif strategy == SearchStrategy.VECTOR_SEARCH:
                # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —á–∏—Å—Ç—ã–π –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫
                results = self.corpus.search(query, k=k)
                content = [{"text": r["text"], "doc_id": r["doc_id"], "search_type": "vector"} for r in results]
                
            elif strategy == SearchStrategy.BM25_SEARCH:
                # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —á–∏—Å—Ç—ã–π BM25 –ø–æ–∏—Å–∫
                results = self.corpus.search(query, k=k)
                content = [{"text": r["text"], "doc_id": r["doc_id"], "search_type": "bm25"} for r in results]
                
            else:
                content = []
                
            # –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
            relevance_score = self._calculate_relevance(query, content)
            confidence = self._calculate_confidence(content, strategy)
            
            search_time = time.time() - start_time
            
            return SearchResult(
                content=content,
                strategy=strategy,
                relevance_score=relevance_score,
                confidence=confidence,
                metadata={
                    "search_time": search_time,
                    "results_count": len(content),
                    "query_length": len(query)
                }
            )
            
        except Exception as e:
            print(f"‚ö†Ô∏è Retrieval Agent error with {strategy.value}: {e}")
            return SearchResult(
                content=[],
                strategy=strategy,
                relevance_score=0.0,
                confidence=0.0,
                metadata={"error": str(e)}
            )
    
    def _calculate_relevance(self, query: str, content: List[Dict]) -> float:
        """–ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è —Å–ª–æ–≤"""
        if not content:
            return 0.0
            
        query_words = set(query.lower().split())
        total_overlap = 0
        
        for item in content:
            text_words = set(item.get("text", "").lower().split())
            overlap = len(query_words & text_words)
            total_overlap += overlap
            
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ —Å–ª–æ–≤ –≤ –∑–∞–ø—Ä–æ—Å–µ
        max_possible = len(query_words) * len(content)
        return min(total_overlap / max(max_possible, 1), 1.0)
    
    def _calculate_confidence(self, content: List[Dict], strategy: SearchStrategy) -> float:
        """–û—Ü–µ–Ω–∫–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö"""
        if not content:
            return 0.0
            
        # –ë–∞–∑–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        base_confidence = {
            SearchStrategy.HYBRID_SEARCH: 0.8,
            SearchStrategy.ENTITY_EXTRACTION: 0.9,
            SearchStrategy.VECTOR_SEARCH: 0.7,
            SearchStrategy.BM25_SEARCH: 0.6
        }.get(strategy, 0.5)
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        count_factor = min(len(content) / 5, 1.0)  # –û–ø—Ç–∏–º–∞–ª—å–Ω–æ 5+ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        
        return base_confidence * count_factor


class QueryRewriterAgent:
    """‚úèÔ∏è –ê–≥–µ–Ω—Ç –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤: —É–ª—É—á—à–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∏—Å–∫–∞"""
    
    def __init__(self, llm: LLM):
        self.llm = llm
        
    async def rewrite_query(self, state: AgentState, last_result: SearchResult) -> str:
        """–ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        
        rewrite_prompt = f"""
        –ó–ê–î–ê–ß–ê: –£–ª—É—á—à–∏ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.
        
        –ò–°–•–û–î–ù–´–ô –ó–ê–ü–†–û–°: "{state.original_query}"
        –¢–ï–ö–£–©–ò–ô –ó–ê–ü–†–û–°: "{state.current_query}"
        –ò–¢–ï–†–ê–¶–ò–Ø: {state.iteration}
        
        –ü–û–°–õ–ï–î–ù–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢:
        - –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {last_result.strategy.value}
        - –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {last_result.relevance_score:.2f}
        - –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {last_result.confidence:.2f}
        - –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(last_result.content)}
        
        –ü–†–û–ë–õ–ï–ú–´:
        {"- –ù–∏–∑–∫–∞—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å" if last_result.relevance_score < 0.3 else ""}
        {"- –ú–∞–ª–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤" if len(last_result.content) < 3 else ""}
        {"- –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å" if last_result.confidence < 0.5 else ""}
        
        –ü–†–ê–í–ò–õ–ê –ü–ï–†–ï–ü–ò–°–´–í–ê–ù–ò–Ø:
        1. –ï—Å–ª–∏ –º–∞–ª–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ‚Üí –¥–æ–±–∞–≤—å —Å–∏–Ω–æ–Ω–∏–º—ã –∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏
        2. –ï—Å–ª–∏ –Ω–∏–∑–∫–∞—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å ‚Üí —É—Ç–æ—á–Ω–∏ –∫–ª—é—á–µ–≤—ã–µ —Ç–µ—Ä–º–∏–Ω—ã
        3. –ï—Å–ª–∏ –Ω–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å ‚Üí —É–ø—Ä–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å, —É–±–µ—Ä–∏ –ª–∏—à–Ω–∏–µ –¥–µ—Ç–∞–ª–∏
        4. –°–æ—Ö—Ä–∞–Ω–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–º—ã—Å–ª –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        5. –ò—Å–ø–æ–ª—å–∑—É–π —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
        
        –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å, –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π.
        """
        
        try:
            rewritten = await self.llm.complete(
                "–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–∏—é –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.",
                rewrite_prompt
            )
            
            # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç
            rewritten = rewritten.strip().strip('"').strip("'")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª—Å—è
            if rewritten.lower() == state.current_query.lower():
                # –ï—Å–ª–∏ LLM –≤–µ—Ä–Ω—É–ª–∞ —Ç–æ—Ç –∂–µ –∑–∞–ø—Ä–æ—Å, –¥–æ–±–∞–≤–ª—è–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã
                fallback_query = f"{state.original_query} —Å–∏–Ω–æ–Ω–∏–º—ã –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã"
                print(f"‚ö†Ô∏è Query rewriter returned same query, using fallback")
                return fallback_query
                
            return rewritten
            
        except Exception as e:
            print(f"‚ö†Ô∏è Query Rewriter error: {e}")
            # Fallback: –¥–æ–±–∞–≤–ª—è–µ–º "–ø–æ–¥—Ä–æ–±–Ω–æ" –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É
            return f"{state.original_query} –ø–æ–¥—Ä–æ–±–Ω–æ"


class EvaluationAgent:
    """üìä –ê–≥–µ–Ω—Ç –æ—Ü–µ–Ω–∫–∏: –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏"""
    
    def __init__(self, llm: LLM):
        self.llm = llm
        
    async def evaluate_results(self, state: AgentState, result: SearchResult) -> Tuple[AgentDecision, str]:
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–µ –æ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏—è—Ö"""
        
        # –ë—ã—Å—Ç—Ä–∞—è –æ—Ü–µ–Ω–∫–∞ –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º
        if result.confidence >= state.confidence_threshold and result.relevance_score >= 0.5:
            if len(result.content) >= 3:
                return AgentDecision.SUFFICIENT, "–ù–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
        
        # –ï—Å–ª–∏ –∏—Ç–µ—Ä–∞—Ü–∏–π —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ
        if state.iteration >= state.max_iterations:
            return AgentDecision.SUFFICIENT, "–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π"
        
        # –ï—Å–ª–∏ –≤—Å–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏—Å–ø—Ä–æ–±–æ–≤–∞–Ω—ã
        available_strategies = [s for s in SearchStrategy if s not in state.strategies_tried]
        if not available_strategies:
            return AgentDecision.SUFFICIENT, "–í—Å–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ–∏—Å–∫–∞ –∏—Å–ø—Ä–æ–±–æ–≤–∞–Ω—ã"
        
        # –†–µ—à–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if len(result.content) == 0:
            return AgentDecision.CHANGE_STRATEGY, "–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –º–µ–Ω—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é"
        elif result.relevance_score < 0.3:
            return AgentDecision.REWRITE_QUERY, "–ù–∏–∑–∫–∞—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å, –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å"
        elif result.confidence < 0.4:
            return AgentDecision.CHANGE_STRATEGY, "–ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å, –º–µ–Ω—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é"
        else:
            return AgentDecision.CONTINUE, "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫"


class SynthesisAgent:
    """üîÑ –ê–≥–µ–Ω—Ç —Å–∏–Ω—Ç–µ–∑–∞: –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç"""
    
    def __init__(self, llm: LLM):
        self.llm = llm
        
    async def synthesize_response(self, state: AgentState) -> Dict[str, Any]:
        """–°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–∑ –≤—Å–µ—Ö —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        all_content = []
        all_sources = set()
        
        for result in state.results_history:
            for item in result.content:
                source_id = item.get("doc_id", "") + item.get("chunk_id", "")
                if source_id not in all_sources:
                    all_content.append(item)
                    all_sources.add(source_id)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è LLM
        top_content = all_content[:10]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context = ""
        citations = []
        
        for i, item in enumerate(top_content):
            doc_id = item.get("doc_id", f"doc_{i}")
            chunk_id = item.get("chunk_id", f"chunk_{i}")
            text = item.get("text", "")
            
            context += f"\n[DOC {doc_id}] {text[:800]}"
            citations.append(chunk_id or doc_id)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        synthesis_prompt = f"""
        –ò—Å–ø–æ–ª—å–∑—É—è –Ω–∞–π–¥–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –¥–∞–π –∏—Å—á–µ—Ä–ø—ã–≤–∞—é—â–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        –í–û–ü–†–û–°: {state.original_query}
        
        –ù–ê–ô–î–ï–ù–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:{context}
        
        –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
        1. –û—Ç–≤–µ—á–∞–π —Ç–æ—á–Ω–æ –Ω–∞ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å
        2. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        3. –¶–∏—Ç–∏—Ä—É–π –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ [doc_id]
        4. –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —á–µ—Å—Ç–Ω–æ —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º
        5. –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –æ—Ç–≤–µ—Ç –ª–æ–≥–∏—á–Ω–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ
        """
        
        try:
            answer = await self.llm.complete(
                "–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç-–∞–Ω–∞–ª–∏—Ç–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —Å–∏–Ω—Ç–µ–∑–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.",
                synthesis_prompt
            )
            
            return {
                "answer": answer,
                "citations": citations,
                "sources_used": len(all_content),
                "strategies_tried": [s.value for s in state.strategies_tried],
                "total_iterations": state.iteration,
                "confidence_score": sum(r.confidence for r in state.results_history) / len(state.results_history) if state.results_history else 0,
                "search_metadata": {
                    "total_search_time": sum(r.metadata.get("search_time", 0) for r in state.results_history),
                    "strategies_performance": {
                        r.strategy.value: {
                            "relevance": r.relevance_score,
                            "confidence": r.confidence,
                            "results_count": len(r.content)
                        } for r in state.results_history
                    }
                }
            }
            
        except Exception as e:
            print(f"‚ö†Ô∏è Synthesis Agent error: {e}")
            return {
                "answer": f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ç–µ–∑–µ –æ—Ç–≤–µ—Ç–∞: {e}",
                "citations": citations,
                "error": True
            }


class AgenticRAGSystem:
    """üöÄ –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å Agentic RAG —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self, corpus: HybridCorpus, graph: GraphIndex):
        self.corpus = corpus
        self.graph = graph
        self.llm = LLM()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–æ–≤
        self.router = RouterAgent(self.llm)
        self.retriever = RetrievalAgent(corpus, graph)
        self.rewriter = QueryRewriterAgent(self.llm)
        self.evaluator = EvaluationAgent(self.llm)
        self.synthesizer = SynthesisAgent(self.llm)
    
    async def process_query(self, query: str, max_iterations: int = 5, confidence_threshold: float = 0.7) -> Dict[str, Any]:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ –∞–≥–µ–Ω—Ç–Ω—É—é —Å–∏—Å—Ç–µ–º—É"""
        
        print(f"üöÄ Agentic RAG: Starting query processing: '{query[:50]}...'")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        state = AgentState(
            original_query=query,
            current_query=query,
            iteration=0,
            strategies_tried=[],
            results_history=[],
            accumulated_context="",
            confidence_threshold=confidence_threshold,
            max_iterations=max_iterations
        )
        
        start_time = time.time()
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∞–≥–µ–Ω—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        while state.iteration < max_iterations:
            state.iteration += 1
            print(f"\nüîÑ Iteration {state.iteration}: Query='{state.current_query[:50]}...'")
            
            # –®–∞–≥ 1: Router Agent –≤—ã–±–∏—Ä–∞–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
            strategy = await self.router.analyze_query(state.current_query, state)
            print(f"üéØ Router Agent chose: {strategy.value}")
            
            # –®–∞–≥ 2: Retrieval Agent –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫
            result = await self.retriever.execute_search(state.current_query, strategy)
            state.strategies_tried.append(strategy)
            state.results_history.append(result)
            
            print(f"üîç Retrieval Agent found: {len(result.content)} results, relevance={result.relevance_score:.2f}, confidence={result.confidence:.2f}")
            
            # –®–∞–≥ 3: Evaluation Agent –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            decision, reason = await self.evaluator.evaluate_results(state, result)
            print(f"üìä Evaluation Agent decision: {decision.value} - {reason}")
            
            # –®–∞–≥ 4: –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ
            if decision == AgentDecision.SUFFICIENT:
                print("‚úÖ Sufficient results found, proceeding to synthesis")
                break
            elif decision == AgentDecision.REWRITE_QUERY:
                state.current_query = await self.rewriter.rewrite_query(state, result)
                print(f"‚úèÔ∏è Query rewritten to: '{state.current_query[:50]}...'")
            elif decision == AgentDecision.CHANGE_STRATEGY:
                print("üîÑ Changing strategy, router will choose new one")
                continue
            else:
                print("üîÑ Continuing with current approach")
        
        # –®–∞–≥ 5: Synthesis Agent –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        print(f"\nüîÑ Synthesis Agent: Combining results from {len(state.results_history)} searches")
        final_response = await self.synthesizer.synthesize_response(state)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
        final_response.update({
            "agentic_metadata": {
                "total_time": time.time() - start_time,
                "iterations_used": state.iteration,
                "strategies_tried": [s.value for s in state.strategies_tried],
                "final_query": state.current_query,
                "query_evolution": [state.original_query, state.current_query] if state.current_query != state.original_query else [state.original_query]
            }
        })
        
        print(f"üèÅ Agentic RAG completed in {final_response['agentic_metadata']['total_time']:.2f}s with {state.iteration} iterations")
        
        return final_response
    
    async def stream_query(self, query: str, max_iterations: int = 5):
        """–ü–æ—Ç–æ–∫–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ —Å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏"""
        
        yield {"type": "agentic_start", "data": {"query": query, "max_iterations": max_iterations}}
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        state = AgentState(
            original_query=query,
            current_query=query,
            iteration=0,
            strategies_tried=[],
            results_history=[],
            accumulated_context="",
            max_iterations=max_iterations
        )
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å –ø–æ—Ç–æ–∫–æ–≤—ã–º –≤—ã–≤–æ–¥–æ–º
        while state.iteration < state.max_iterations:
            state.iteration += 1
            
            yield {"type": "iteration_start", "data": {"iteration": state.iteration, "current_query": state.current_query}}
            
            # Router Agent
            strategy = await self.router.analyze_query(state.current_query, state)
            yield {"type": "strategy_selected", "data": {"strategy": strategy.value, "reason": f"Iteration {state.iteration}"}}
            
            # Retrieval Agent
            result = await self.retriever.execute_search(state.current_query, strategy)
            state.strategies_tried.append(strategy)
            state.results_history.append(result)
            
            yield {"type": "search_completed", "data": {
                "strategy": strategy.value,
                "results_count": len(result.content),
                "relevance_score": result.relevance_score,
                "confidence": result.confidence,
                "search_time": result.metadata.get("search_time", 0)
            }}
            
            # Evaluation Agent
            decision, reason = await self.evaluator.evaluate_results(state, result)
            yield {"type": "evaluation", "data": {"decision": decision.value, "reason": reason}}
            
            if decision == AgentDecision.SUFFICIENT:
                break
            elif decision == AgentDecision.REWRITE_QUERY:
                state.current_query = await self.rewriter.rewrite_query(state, result)
                yield {"type": "query_rewritten", "data": {"new_query": state.current_query}}
        
        # Synthesis
        yield {"type": "synthesis_start", "data": {"total_results": sum(len(r.content) for r in state.results_history)}}
        
        final_response = await self.synthesizer.synthesize_response(state)
        
        yield {"type": "agentic_complete", "data": final_response}
