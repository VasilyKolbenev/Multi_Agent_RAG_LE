#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –¥–ª—è Railway —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
"""
import os
import sys
from pathlib import Path
from dotenv import load_dotenv

# --- –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –ò–ó .env ---
# Railway —Å–æ–∑–¥–∞–µ—Ç .env —Ñ–∞–π–ª –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ UI.
# –ó–∞–≥—Ä—É–∂–∞–µ–º –µ–≥–æ —è–≤–Ω–æ, —á—Ç–æ–±—ã –æ–±–æ–π—Ç–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–∫—Ä—É–∂–µ–Ω–∏–µ–º.
if load_dotenv():
    print("‚úÖ .env file loaded successfully.")
else:
    print("‚ö†Ô∏è .env file not found, relying on system environment variables.")
# --- –ö–û–ù–ï–¶ ---

# --- –û–¢–õ–ê–î–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø ---
print("="*50)
print("üîç DEBUG: Checking Environment Variables on Railway...")
all_vars = os.environ
if "OPENAI_API_KEY" in all_vars:
    print("‚úÖ OPENAI_API_KEY is available!")
    # –ü–µ—á–∞—Ç–∞–µ–º –ø–µ—Ä–≤—ã–µ 8 –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    key = all_vars["OPENAI_API_KEY"]
    print(f"   Value: {key[:8]}...{key[-4:]}")
else:
    print("‚ùå CRITICAL: OPENAI_API_KEY is NOT FOUND in environment variables.")
print("="*50)
# --- –ö–û–ù–ï–¶ –û–¢–õ–ê–î–ö–ò ---


print("üîç Railway Debug Start")
print("=" * 50)

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
print("üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...")
try:
    Path("data/docs").mkdir(parents=True, exist_ok=True)
    Path("data/extracts").mkdir(parents=True, exist_ok=True)
    print("‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: {e}")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
print("\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
required_vars = ["OPENAI_API_KEY", "LLM_PROVIDER", "LLM_MODEL", "LX_MODEL_ID"]
for var in required_vars:
    value = os.environ.get(var)
    if value:
        print(f"‚úÖ {var}: {'*' * 10}")
    else:
        print(f"‚ùå {var}: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º defaults
os.environ.setdefault("LLM_PROVIDER", "openai")
os.environ.setdefault("LLM_MODEL", "gpt-5-mini") 
os.environ.setdefault("LX_MODEL_ID", "openai:gpt-5-mini")
os.environ.setdefault("DOCS_DIR", "data/docs")
os.environ.setdefault("DATA_DIR", "data")

print("\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤...")
try:
    import uvicorn
    print("‚úÖ uvicorn")
    
    import fastapi
    print("‚úÖ fastapi")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
    sys.path.insert(0, '.')
    from server.main import app
    print("‚úÖ server.main")
    
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    import traceback
    traceback.print_exc()
    sys.exit(1)

print("\nüöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞...")
port = int(os.environ.get("PORT", 8000))
print(f"üåê –ü–æ—Ä—Ç: {port}")

try:
    uvicorn.run(
        "server.main:app",
        host="0.0.0.0", 
        port=port,
        reload=False,
        log_level="debug"
    )
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
    import traceback
    traceback.print_exc()
    sys.exit(1)
